{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { detailsUser } from \"../actions/userActions\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserEditScreen(props) {\n  _s();\n\n  /*We need specific Id for editing data*/\n  const userId = props.match.params.id;\n  /*Now we need to define useEffect()*/\n\n  const [name, setName] = useState(' ');\n  const [email, setEmail] = useState(' ');\n  const [isSeller, setIsSeller] = useState(false);\n  /*By default it is false*/\n\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  /*For getting users in details from redux store, i.e. from store.js*/\n\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n\n  const submitHandler = e => {\n    e.preventDefault();\n    /*Preventing page refresh when user clicks on the edit button*/\n  };\n\n  useEffect(() => {\n    /*Need to check user*/\n    if (!user) {\n      /*If not exists, bring it*/\n      dispatch(detailsUser(userId));\n    }\n  }, [dispatch, user, userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Editing \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            placeholder: \"Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"E-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"text\",\n            placeholder: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isSeller\",\n            children: \"Whether Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isSeller\",\n            type: \"checkbox\",\n            onChange: e => setIsSeller(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isAdmin\",\n            children: \"Whether Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isAdmin\",\n            type: \"checkbox\",\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary\",\n            children: \"Update \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserEditScreen, \"QlJTF5Wkj2TDnlr8p7MO8UvvExE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","detailsUser","LoadingBox","MessageBox","UserEditScreen","props","userId","match","params","id","name","setName","email","setEmail","isSeller","setIsSeller","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { detailsUser } from \"../actions/userActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\n\r\nexport default function UserEditScreen(props) {\r\n    /*We need specific Id for editing data*/\r\n    const userId = props.match.params.id; /*Now we need to define useEffect()*/\r\n\r\n    const [name, setName] = useState(' ');\r\n    const [email, setEmail] = useState(' ');\r\n    const [isSeller, setIsSeller] = useState(false); /*By default it is false*/\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const dispatch = useDispatch();\r\n    \r\n    /*For getting users in details from redux store, i.e. from store.js*/\r\n    const userDetails = useSelector((state) => state.userDetails);\r\n    const {loading, error, user} = userDetails;\r\n\r\n    \r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault(); /*Preventing page refresh when user clicks on the edit button*/\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        /*Need to check user*/\r\n        if(!user) { /*If not exists, bring it*/\r\n            dispatch(detailsUser(userId));\r\n        }\r\n    }, [dispatch, user, userId]);\r\n\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={submitHandler}>\r\n                <div>\r\n                    <h1>Editing {name}</h1>\r\n                </div>\r\n                {loading ? <LoadingBox></LoadingBox>\r\n                : error ? <MessageBox variant = \"danger\">{error}</MessageBox>\r\n                : \r\n                <>\r\n                <div /*for name*/>\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input id=\"name\" type=\"text\" placeholder=\"Name\"\r\n                    value={name} onChange={(e) => setName(e.target.value)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*for email*/>\r\n                    <label htmlFor=\"email\">E-mail</label>\r\n                    <input id=\"email\" type=\"text\" placeholder=\"email\"\r\n                    value={email} onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*Checkbox for whether seller*/>\r\n                    <label htmlFor=\"isSeller\">Whether Seller</label>\r\n                    <input id=\"isSeller\" type=\"checkbox\" \r\n                    onChange={(e) => setIsSeller(e.target.checked)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*Checkbox for whether Admin*/>\r\n                    <label htmlFor=\"isAdmin\">Whether Admin</label>\r\n                    <input id=\"isAdmin\" type=\"checkbox\" \r\n                    onChange={(e) => setIsAdmin(e.target.checked)}>\r\n                    \r\n                    </input>\r\n                </div>\r\n                \r\n                <div>\r\n                    <button type=\"submit\" className=\"primary\">Update </button>\r\n                </div>\r\n                </>\r\n                }\r\n            </form>\r\n           \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}