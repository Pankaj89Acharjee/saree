{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\ProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { detailsUser } from '../actions/userActions';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ProfileScreen(props) {\n  _s();\n\n  /*For Updating the fields*/\n  const [name, setName] = useState(' ');\n  const [email, setEmail] = useState(' ');\n  const [password, setPassword] = useState(' ');\n  const [confirmPassword, setConfirmPassword] = useState(' ');\n  /*Getting 'signin' details from Redux store for passing parameter to the detailsUser() fx\r\n  for getting details of the user*/\n\n  const userSignin = useSelector(state => state.userSignin);\n  /*From userSigin, we get userInfo*/\n\n  const {\n    userInfo\n  } = userSignin;\n  /*Getting userDetails from redux store i.e., defined in App.js and \r\n  in App.js it redirects to Reducers*/\n\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  /*Importing dispatch from React Redux*/\n\n  const dispatch = useDispatch();\n  /*Getting user information from the redux*/\n\n  useEffect(() => {\n    if (!user) {\n      /*useEffect contains two parameters, first is the function that\r\n      runs and the second one is the dependency list in [].*/\n      dispatch(detailsUser(userInfo._id));\n      /*detailsUser is an action in userAction file*/\n    } else {\n      /*Filling name and email from the backend*/\n      setName(user.name);\n      setEmail(user.email);\n    }\n  }, [dispatch, userInfo._id, user]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('Password didnot match');\n    } else {\n      dispatch(updateUserProfile({\n        /*A new action created and define it in userActions file\r\n        as well as create a constant in the constants folder*/\n        userId: user._id,\n        name,\n        email,\n        password\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"User Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 30\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            placeholder: \"Enter your name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"email\",\n            placeholder: \"Enter your e-mail\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"password\",\n            type: \"password\",\n            placeholder: \"Enter your password\",\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confirmPassword\",\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"confirmPassword\",\n            type: \"password\",\n            placeholder: \"Re-enter your password\",\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary\",\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProfileScreen, \"RzmI+Ig/lVgfBekj1JsVA0DnFuA=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/ProfileScreen.js"],"names":["React","useEffect","useDispatch","useSelector","detailsUser","LoadingBox","MessageBox","ProfileScreen","props","name","setName","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","userSignin","state","userInfo","userDetails","loading","error","user","dispatch","_id","submitHandler","e","preventDefault","alert","updateUserProfile","userId","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { detailsUser } from '../actions/userActions';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport MessageBox from '../components/MessageBox';\r\n\r\nexport default function ProfileScreen(props) {\r\n    \r\n    /*For Updating the fields*/\r\n    const [name, setName] = useState(' ');\r\n    const [email, setEmail] = useState(' ');\r\n    const [password, setPassword] = useState(' ');\r\n    const [confirmPassword, setConfirmPassword] = useState(' ');\r\n\r\n\r\n     \r\n    /*Getting 'signin' details from Redux store for passing parameter to the detailsUser() fx\r\n    for getting details of the user*/\r\n    const userSignin = useSelector((state) => state.userSignin);\r\n    /*From userSigin, we get userInfo*/\r\n    const {userInfo} = userSignin;\r\n   \r\n\r\n    /*Getting userDetails from redux store i.e., defined in App.js and \r\n    in App.js it redirects to Reducers*/\r\n    const userDetails = useSelector((state) => state.userDetails);\r\n    const { loading, error, user } = userDetails;\r\n\r\n\r\n    /*Importing dispatch from React Redux*/\r\n    const dispatch = useDispatch();\r\n\r\n    /*Getting user information from the redux*/\r\n    useEffect(() => {\r\n        if(!user) {\r\n             /*useEffect contains two parameters, first is the function that\r\n        runs and the second one is the dependency list in [].*/\r\n\r\n        dispatch(detailsUser(userInfo._id)); /*detailsUser is an action in userAction file*/\r\n        } else {\r\n            /*Filling name and email from the backend*/\r\n            setName(user.name);\r\n            setEmail(user.email);\r\n        }\r\n    }, [dispatch, userInfo._id, user]);\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (password !== confirmPassword)\r\n        {\r\n            alert('Password didnot match');\r\n        } else {\r\n            dispatch(updateUserProfile({ /*A new action created and define it in userActions file\r\n                as well as create a constant in the constants folder*/\r\n                userId: user._id, name, email, password}));\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <form className=\"form\" onSubmit = {submitHandler}>\r\n                <div>\r\n                    <h1>User Profile</h1>\r\n                </div>\r\n                { loading ? (<LoadingBox></LoadingBox>\r\n                ) : error ? (<MessageBox variant = \"danger\">{error}</MessageBox>\r\n                ) : (\r\n\r\n         \r\n                <>\r\n                    <div>\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <input id = \"name\"\r\n                               type = \"text\"\r\n                               placeholder = \"Enter your name\"\r\n                               value={name}\r\n                               onChange = {(e) => setName(e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input id = \"email\"\r\n                               type = \"email\"\r\n                               placeholder = \"Enter your e-mail\"\r\n                               value={email}\r\n                               onChange = {(e) => setEmail(e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input id = \"password\"\r\n                               type = \"password\"\r\n                               placeholder = \"Enter your password\"\r\n                               onChange = {(e) => setPassword(e.target.value)}>\r\n                        </input>    \r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                        <input id = \"confirmPassword\"\r\n                               type = \"password\"\r\n                               placeholder = \"Re-enter your password\"\r\n                               onChange = {(e) => setConfirmPassword(e.target.value)}>\r\n                               \r\n                        </input>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label/>\r\n                        <button className=\"primary\" type=\"submit\">Update</button>\r\n                        \r\n                    </div>\r\n                </>\r\n                ) \r\n            }\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}