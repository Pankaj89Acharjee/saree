{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\OrderListScreen.js\",\n    _s = $RefreshSig$();\n\n/*For viewing and editing/deleting the orders under ADMIN*/\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteOrder, listOrders } from \"../actions/orderActions\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { ORDER_DELETE_RESET } from \"../constants/orderConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrderListScreen(props) {\n  _s();\n\n  /*getting OrderList object from OrderReducer*/\n  const orderList = useSelector(state => state.orderList);\n  const {\n    loading,\n    error,\n    orders\n  } = orderList;\n  /*getting orderDelete from redux store i.e. from store.js*/\n\n  const orderDelete = useSelector(state => state.orderDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete\n  } = orderDelete;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (successDelete) {\n      dispatch({\n        type: ORDER_DELETE_RESET\n      });\n    }\n    /*As we donot want to delete any more data after the first one choiced by\r\n    us was deleted, we have to reset it and and show the order list*/\n\n\n    dispatch(listOrders());\n    /*Need to define the fx in orderActions.js in actions folder.*/\n  }, [dispatch, successDelete]);\n\n  const deleteHandler = order => {\n    if (window.confirm('Are you sure to delete?')) {\n      dispatch(deleteOrder(order._id));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Orders by Customers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), loadingDelete && /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 31\n    }, this), errorDelete && /*#__PURE__*/_jsxDEV(MessageBox, {\n      variant: \"danger\",\n      children: errorDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 26\n    }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ORDER ID NO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"USER_NAME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DATE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"TOTAL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"PAID/NOT PAID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DELIVERED/HOLDING\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ACTIONS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: orders.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: order._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: order.user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: order.createdAt.substring(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"Rs.\", order.totalPrice.toFixed(2), \"/-\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: order.isPaid ? order.paidAt.substring(0, 10) : 'Not Paid'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: order.isDelivered ? order.deliveredAt.substring(0, 10) : 'Not Delivered'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: () => {\n                props.history.push(`/order/${order._id}`);\n              },\n              children: \"Order Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 34\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"small\",\n              type: \"button\",\n              onClick: () => deleteHandler(order),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 30\n          }, this)]\n        }, order._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 30\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OrderListScreen, \"MnkrgBnhA5U1xVd7+iGP6WKOzGw=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = OrderListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderListScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/OrderListScreen.js"],"names":["React","useEffect","useDispatch","useSelector","deleteOrder","listOrders","LoadingBox","MessageBox","ORDER_DELETE_RESET","OrderListScreen","props","orderList","state","loading","error","orders","orderDelete","loadingDelete","errorDelete","success","successDelete","dispatch","type","deleteHandler","order","window","confirm","_id","map","user","name","createdAt","substring","totalPrice","toFixed","isPaid","paidAt","isDelivered","deliveredAt","history","push"],"mappings":"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","sourcesContent":["/*For viewing and editing/deleting the orders under ADMIN*/\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteOrder, listOrders } from \"../actions/orderActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { ORDER_DELETE_RESET } from \"../constants/orderConstants\";\r\n\r\nexport default function OrderListScreen(props) {\r\n    /*getting OrderList object from OrderReducer*/\r\n    const orderList = useSelector(state => state.orderList);\r\n    const {loading, error, orders} = orderList;\r\n\r\n\r\n    /*getting orderDelete from redux store i.e. from store.js*/\r\n    const orderDelete = useSelector(state => state.orderDelete);\r\n    const {loading: loadingDelete, error: errorDelete, success: successDelete} = orderDelete;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect (() => {\r\n        if(successDelete) {\r\n            dispatch({type: ORDER_DELETE_RESET});\r\n        }\r\n        \r\n        /*As we donot want to delete any more data after the first one choiced by\r\n        us was deleted, we have to reset it and and show the order list*/\r\n        \r\n        dispatch(listOrders()); /*Need to define the fx in orderActions.js in actions folder.*/\r\n    }, [dispatch, successDelete]);\r\n\r\n    const deleteHandler = (order) => {\r\n        if(window.confirm('Are you sure to delete?')) {\r\n            dispatch(deleteOrder(order._id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <h1 /*We need to check 'loading' first*/>Orders by Customers</h1>\r\n            {loadingDelete && <LoadingBox></LoadingBox>}\r\n            {errorDelete && <MessageBox variant=\"danger\">{errorDelete}</MessageBox>}\r\n            {loading ? ( <LoadingBox></LoadingBox> \r\n             ): ( error ? <MessageBox variant = \"danger\">{error}</MessageBox>\r\n             : (\r\n                 <table className=\"table\">\r\n                     <thead>\r\n                     <tr>\r\n                        <th>ORDER ID NO</th>\r\n                        <th>USER_NAME</th>\r\n                        <th>DATE</th>\r\n                        <th>TOTAL</th>\r\n                        <th>PAID/NOT PAID</th>\r\n                        <th>DELIVERED/HOLDING</th>\r\n                        <th>ACTIONS</th>\r\n                     </tr>\r\n                     </thead>\r\n                     <tbody /*Now looking over orders and using map fx to convert each orderobject into JSX*/>\r\n                         {orders.map((order) => (\r\n                             <tr key={order._id}>\r\n                             <td>{order._id}</td>\r\n                             <td>{order.user.name}</td>\r\n                             <td>{order.createdAt.substring(0, 10)}</td>\r\n                             <td>Rs.{order.totalPrice.toFixed(2)}/-</td>\r\n                             <td /*isPaid is conditional. If it is true (\r\n                                 ?) then show order.paidAt for showing \r\n                                 only date part and not time. Substring is used to capture only \r\n                                 date and not the time of the payment. If this condition is\r\n                                 false, then it will show not payment not paid \r\n                                 */>\r\n                                     {order.isPaid ? order.paidAt.substring(0, 10) : 'Not Paid'}         \r\n                            </td>\r\n                             \r\n                             <td>{order.isDelivered ? order.deliveredAt.substring(0, 10) : 'Not Delivered'}</td>\r\n                             <td>\r\n                                 <button type=\"button\" className=\"btn btn-primary\"\r\n                                 onClick={() => {\r\n                                     props.history.push(`/order/${order._id}`);\r\n                                 }}>Order Details</button>\r\n\r\n                                 <button \r\n                                 className=\"small\"\r\n                                 type = \"button\"\r\n                                 onClick={() => deleteHandler(order)}>\r\n                                     Delete\r\n                                 </button>\r\n                             </td>\r\n                             \r\n                         </tr>\r\n                         )\r\n                            \r\n                         )}\r\n                     </tbody>\r\n                 </table>\r\n\r\n             )\r\n             )\r\n            }\r\n\r\n        </div>\r\n    )\r\n        \r\n    \r\n}"]},"metadata":{},"sourceType":"module"}