{"ast":null,"code":"import Axios from \"axios\";\nimport { USER_DELETE_FAIL, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LIST_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGIN_FAIL, USER_SIGIN_REQUEST, USER_SIGIN_SIGNOUT, USER_SIGIN_SUCCESS, USER_TOPSELLER_LIST_FAIL, USER_TOPSELLER_LIST_REQUEST, USER_TOPSELLER_LIST_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_SUCCESS } from \"../constants/userConstants\";\nexport const signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    /*AJAX  post request for signin*/\n    const {\n      data\n    } = await Axios.post('/api/users/signin', {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  dispatch({\n    type: USER_SIGIN_SIGNOUT\n  });\n};\n/*New User Registration*/\n\nexport const register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    /*AJAX  post request for signin*/\n    const {\n      data\n    } = await Axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    /*The below code is to update redux that a new user has registered*/\n\n    dispatch({\n      type: USER_SIGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n/*For Fetching user details information*/\n\nexport const detailsUser = userId => async (dispatch, getState) => {\n  /*Now declare constants in the userConstants*/\n  dispatch({\n    type: USER_DETAILS_REQUEST,\n    payload: userId\n  });\n  /*Get a token by getState method. The {userSignin and {userInfo} values\r\n  are used here to get data and these constants are brought from \r\n  ProfileScreen =>useSelector method}*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX Request*/\n    const {\n      data\n    } = await Axios.get(`/api/users/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\n/*From the ProfileScreen.js file, defining fx updateUserProfile()*/\n\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  /*Connecting constants*/\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST,\n    payload: user\n  });\n  /*Get a token by getState method. The {userSignin and {userInfo} values\r\n  are used here to get data and these constants are brought from \r\n  ProfileScreen =>useSelector method}*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX Request. As it is sending data to backend, PUT method is used*/\n\n    /* /api/users/profile` ====> profile comes from App.js> Route*/\n    const {\n      data\n    } = await Axios.put(`/api/users/profile`, user, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_SIGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};\n/*Defining fx in the UserListScreen namely \"listUsers()\"*/\n\nexport const listUsers = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_LIST_REQUEST\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get('/api/users', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.message && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};\n/*Defining deleteUser() fx in the UserList Screen.js for deleting users*/\n\nexport const deleteUser = userId => async (dispatch, getState) => {\n  dispatch({\n    type: USER_DELETE_REQUEST,\n    payload: userId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.delete(`/api/users/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.message && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\n/*For updaing user data*/\n\nexport const updateUser = user => async (dispatch, getState) => {\n  /*Connecting constants*/\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST,\n    payload: user\n  });\n  /*Get a token by getState method. The {userSignin and {userInfo} values\r\n  are used here to get data and these constants are brought from \r\n  ProfileScreen =>useSelector method}*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX Request. As it is sending data to backend, PUT method is used*/\n\n    /* /api/users/profile` ====> profile comes from App.js> Route*/\n    const {\n      data\n    } = await Axios.put(`/api/users/${user._id}`, user, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\n/*Defining fx in the Homecreen namely \"listTopSellers()\"*/\n\nexport const listTopSellers = () => async dispatch => {\n  dispatch({\n    type: USER_TOPSELLER_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/users/top-sellers');\n    dispatch({\n      type: USER_TOPSELLER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.message && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_TOPSELLER_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Gemsapp/frontend/src/actions/userActions.js"],"names":["Axios","USER_DELETE_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LIST_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGIN_FAIL","USER_SIGIN_REQUEST","USER_SIGIN_SIGNOUT","USER_SIGIN_SUCCESS","USER_TOPSELLER_LIST_FAIL","USER_TOPSELLER_LIST_REQUEST","USER_TOPSELLER_LIST_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_SUCCESS","signin","email","password","dispatch","type","payload","data","post","localStorage","setItem","JSON","stringify","error","response","message","signout","removeItem","register","name","detailsUser","userId","getState","userSignin","userInfo","get","headers","Authorization","token","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id","listTopSellers"],"mappings":"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","sourcesContent":["import  Axios  from \"axios\";\r\nimport { USER_DELETE_FAIL, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DETAILS_FAIL, \r\n    USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, \r\n    USER_LIST_FAIL, \r\n    USER_LIST_REQUEST, \r\n    USER_LIST_SUCCESS, \r\n    USER_REGISTER_FAIL, USER_REGISTER_REQUEST, \r\n    USER_REGISTER_SUCCESS, USER_SIGIN_FAIL, \r\n    USER_SIGIN_REQUEST, USER_SIGIN_SIGNOUT, \r\n    USER_SIGIN_SUCCESS, \r\n    USER_TOPSELLER_LIST_FAIL, \r\n    USER_TOPSELLER_LIST_REQUEST, \r\n    USER_TOPSELLER_LIST_SUCCESS, \r\n    USER_UPDATE_FAIL, \r\n    USER_UPDATE_PROFILE_FAIL, \r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_SUCCESS} from \"../constants/userConstants\"\r\n\r\n\r\nexport const signin = (email, password) => async(dispatch) => {\r\n    dispatch ({ type: USER_SIGIN_REQUEST, payload: { email, password}});\r\n    try {\r\n        /*AJAX  post request for signin*/\r\n        const { data } = await Axios.post('/api/users/signin', { email, password });\r\n        dispatch({ type: USER_SIGIN_SUCCESS, payload: data });\r\n        localStorage.setItem('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_SIGIN_FAIL,\r\n            payload:\r\n            error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n\r\n        });\r\n    }    \r\n};\r\n\r\nexport const signout = () => (dispatch) =>{\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('cartItems');\r\n    localStorage.removeItem('shippingAddress');\r\n    dispatch({type: USER_SIGIN_SIGNOUT});\r\n};\r\n\r\n\r\n/*New User Registration*/\r\nexport const register = (name, email, password) => async(dispatch) => {\r\n    dispatch ({ type: USER_REGISTER_REQUEST, payload: { name, email, password}});\r\n    try {\r\n        /*AJAX  post request for signin*/\r\n        const { data } = await Axios.post('/api/users/register', { name, email, password });\r\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n        /*The below code is to update redux that a new user has registered*/\r\n        dispatch({ type: USER_SIGIN_SUCCESS, payload: data });\r\n        localStorage.setItem('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n            error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n\r\n        });\r\n    }    \r\n};\r\n\r\n\r\n/*For Fetching user details information*/\r\nexport const detailsUser = (userId) => async (dispatch, getState) => {\r\n    /*Now declare constants in the userConstants*/\r\n    dispatch({ type: USER_DETAILS_REQUEST, payload: userId});\r\n    /*Get a token by getState method. The {userSignin and {userInfo} values\r\nare used here to get data and these constants are brought from \r\nProfileScreen =>useSelector method}*/\r\n    const { userSignin: {userInfo}} = getState();\r\n    try{\r\n        /*AJAX Request*/\r\n        const { data } = await Axios.get(`/api/users/${userId}`, {\r\n            headers: { Authorization: `Bearer ${userInfo?.token}`},\r\n        });\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data});\r\n    \r\n    } catch (error) {\r\n        const message = \r\n        error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({ type: USER_DETAILS_FAIL, payload:message});\r\n    }\r\n};\r\n\r\n\r\n/*From the ProfileScreen.js file, defining fx updateUserProfile()*/\r\nexport const updateUserProfile = (user) =>async(dispatch, getState) => {\r\n    /*Connecting constants*/\r\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST, payload: user});\r\n    /*Get a token by getState method. The {userSignin and {userInfo} values\r\n    are used here to get data and these constants are brought from \r\n    ProfileScreen =>useSelector method}*/\r\n    const { userSignin: {userInfo}} = getState();\r\n    try{\r\n    /*AJAX Request. As it is sending data to backend, PUT method is used*/\r\n    /* /api/users/profile` ====> profile comes from App.js> Route*/\r\n    const { data } = await Axios.put(`/api/users/profile`, user,  {\r\n        headers: { Authorization: `Bearer ${userInfo.token}`},\r\n    });\r\n    dispatch({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data});\r\n    dispatch({ type: USER_SIGIN_SUCCESS, payload: data});\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        const message = \r\n        error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({ type: USER_UPDATE_PROFILE_FAIL, payload:message});\r\n    }\r\n};\r\n\r\n/*Defining fx in the UserListScreen namely \"listUsers()\"*/\r\nexport const listUsers = () => async(dispatch, getState) => {\r\n    dispatch({ type: USER_LIST_REQUEST});\r\n    try{\r\n        const {userSignin: {userInfo}} = getState();\r\n        const { data} = await Axios.get('/api/users', {\r\n            headers: { Authorization: `Bearer ${userInfo.token}`}\r\n        });\r\n        dispatch({type: USER_LIST_SUCCESS, payload: data});\r\n    } catch (error){\r\n        const message = \r\n        error.message && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({type: USER_LIST_FAIL, payload:message});\r\n    }\r\n}\r\n\r\n/*Defining deleteUser() fx in the UserList Screen.js for deleting users*/\r\nexport const deleteUser = (userId) => async (dispatch, getState) => {\r\n    dispatch({type: USER_DELETE_REQUEST, payload: userId});\r\n    const { userSignin:{userInfo}} = getState();\r\n    try{\r\n        const { data } = await Axios.delete(`/api/users/${userId}`, {\r\n            headers: { Authorization: `Bearer ${userInfo.token}`}\r\n        });\r\n        dispatch({type: USER_DELETE_SUCCESS, payload: data});\r\n    } catch (error) {\r\n        const message = \r\n        error.message && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({type: USER_DELETE_FAIL, payload:message}); \r\n    }\r\n}\r\n\r\n\r\n/*For updaing user data*/\r\nexport const updateUser = (user) =>async(dispatch, getState) => {\r\n    /*Connecting constants*/\r\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST, payload: user});\r\n    /*Get a token by getState method. The {userSignin and {userInfo} values\r\n    are used here to get data and these constants are brought from \r\n    ProfileScreen =>useSelector method}*/\r\n    const { userSignin: {userInfo}} = getState();\r\n    try{\r\n    /*AJAX Request. As it is sending data to backend, PUT method is used*/\r\n    /* /api/users/profile` ====> profile comes from App.js> Route*/\r\n    const { data } = await Axios.put(`/api/users/${user._id}`, user,  {\r\n        headers: { Authorization: `Bearer ${userInfo.token}`},\r\n    });\r\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data});\r\n    } catch (error) {\r\n        const message = \r\n        error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({ type: USER_UPDATE_FAIL, payload:message});\r\n    }\r\n};\r\n\r\n/*Defining fx in the Homecreen namely \"listTopSellers()\"*/\r\nexport const listTopSellers = () => async(dispatch) => {\r\n    dispatch({ type: USER_TOPSELLER_LIST_REQUEST});\r\n    try{\r\n        \r\n        const { data} = await Axios.get('/api/users/top-sellers');\r\n        dispatch({type: USER_TOPSELLER_LIST_SUCCESS, payload: data});\r\n    } catch (error){\r\n        const message = \r\n        error.message && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n        dispatch({type: USER_TOPSELLER_LIST_FAIL, payload:message});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}