{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\ShippingAddressScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveShippingAddress } from '../actions/cartActions';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShippingAddressScreen(props) {\n  _s();\n\n  const userSignin = useSelector(state => state.userSignin);\n  const cart = useSelector(state => state.cart);\n  /*Getting state/status of cart from the redux*/\n\n  const {\n    shippingAddress\n  } = cart;\n  /*Hooks for lattitude and longitude of the user*/\n\n  const [lat, setLat] = useState(shippingAddress.lat);\n  const [lng, setLng] = useState(shippingAddress.lng);\n  const {\n    userInfo\n  } = userSignin;\n  /*For  \"if(!userInfo){\" portion*/\n\n  /*For Map Location*/\n\n  const userAddressMap = useSelector(state => state.userAddressMap);\n  /*Getting state/status of cart from the redux*/\n\n  const {\n    address: addressMap\n  } = userAddressMap;\n  /*If the user is not logged in, then the page will redirect him to the sign-in page*/\n\n  if (!userInfo) {\n    props.history.push('/signin');\n  }\n  /*useState is filled with the\r\n  status of the state \r\n  in the REDUX, because to \r\n  hold the data in the \r\n  input boxes, entered by the user\r\n  for auto fillup the fields*/\n\n\n  const [fullName, setFullName] = useState(shippingAddress.fullName);\n  const [address, setAddress] = useState(shippingAddress.address);\n  const [city, setCity] = useState(shippingAddress.city);\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\n  const [country, setCountry] = useState(shippingAddress.country);\n  const dispatch = useDispatch();\n\n  const submitHandler = e => {\n    e.preventDefault();\n    /*Getting new lat and lng from the user*/\n\n    const newLat = addressMap ? addressMap.lat : lat;\n    const newLng = addressMap ? addressMap.lng : lng;\n\n    if (addressMap) {\n      setLat(addressMap.lat);\n      setLng(addressMap.lng);\n    }\n\n    let moveOn = true;\n    /*As giving address on map is not mandatory, user can skip it*/\n\n    if (!newLat || !newLng) {\n      moveOn = window.confirm('Address not selected. Do you wish to continue?');\n    }\n\n    if (moveOn) {\n      dispatch(saveShippingAddress({\n        fullName,\n        address,\n        city,\n        postalCode,\n        country,\n        lat: newLat,\n        lng: newLng\n      }));\n      props.history.push('/payment');\n    }\n  };\n  /*Defining chooseOnMap fx*/\n\n\n  const chooseOnMap = () => {\n    dispatch(saveShippingAddress({\n      fullName,\n      address,\n      city,\n      postalCode,\n      country,\n      lat,\n      lng\n    }));\n    props.history.push('/map');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CheckoutSteps, {\n      step1: true,\n      step2: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Shipping Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fullName\",\n          children: \"Full Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"fullName\",\n          placeholder: \"Enter your full name\",\n          value: fullName,\n          onChange: e => setFullName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"address\",\n          children: \"Address \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"address\",\n          placeholder: \"Enter your full address\",\n          value: address,\n          onChange: e => setAddress(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"city\",\n          children: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"city\",\n          placeholder: \"Enter your city\",\n          value: city,\n          onChange: e => setCity(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postalCode\",\n          children: \"Postal Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"postalCode\",\n          placeholder: \"Enter your full name\",\n          value: postalCode,\n          onChange: e => setPostalCode(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"country\",\n          children: \"Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"country\",\n          placeholder: \"Your address\",\n          value: country,\n          onChange: e => setCountry(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"chooseOnMap\",\n          children: \"Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: chooseOnMap,\n          children: \"Select Address on Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary\",\n          type: \"submit\",\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ShippingAddressScreen, \"JJ02tmLQfjUJKDRvO2njQ44Im0M=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = ShippingAddressScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShippingAddressScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/ShippingAddressScreen.js"],"names":["React","useState","useDispatch","useSelector","saveShippingAddress","CheckoutSteps","ShippingAddressScreen","props","userSignin","state","cart","shippingAddress","lat","setLat","lng","setLng","userInfo","userAddressMap","address","addressMap","history","push","fullName","setFullName","setAddress","city","setCity","postalCode","setPostalCode","country","setCountry","dispatch","submitHandler","e","preventDefault","newLat","newLng","moveOn","window","confirm","chooseOnMap","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveShippingAddress } from '../actions/cartActions';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\n\r\nexport default function ShippingAddressScreen(props) {\r\n    const userSignin = useSelector(state => state.userSignin);\r\n\r\n    const cart = useSelector(state => state.cart);/*Getting state/status of cart from the redux*/\r\n    const {shippingAddress} = cart;\r\n\r\n    /*Hooks for lattitude and longitude of the user*/\r\n    const [lat, setLat] = useState(shippingAddress.lat);\r\n    const [lng, setLng] = useState(shippingAddress.lng);\r\n\r\n    const {userInfo} = userSignin; /*For  \"if(!userInfo){\" portion*/\r\n    \r\n\r\n    /*For Map Location*/\r\n    const userAddressMap = useSelector(state => state.userAddressMap);/*Getting state/status of cart from the redux*/\r\n    const {address: addressMap} = userAddressMap;\r\n\r\n\r\n\r\n    /*If the user is not logged in, then the page will redirect him to the sign-in page*/\r\n    if(!userInfo){\r\n        props.history.push('/signin');\r\n    }\r\n                                /*useState is filled with the\r\n                                status of the state \r\n                                in the REDUX, because to \r\n                                hold the data in the \r\n                                input boxes, entered by the user\r\n                                for auto fillup the fields*/\r\n    const [fullName, setFullName] = useState(shippingAddress.fullName);\r\n    const [address, setAddress] = useState(shippingAddress.address);\r\n    const [city, setCity] = useState(shippingAddress.city);\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\r\n    const [country, setCountry] = useState(shippingAddress.country);\r\n    const dispatch = useDispatch();\r\n    \r\n    \r\n    \r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        /*Getting new lat and lng from the user*/\r\n        const newLat = addressMap ? addressMap.lat : lat;\r\n        const newLng = addressMap ? addressMap.lng : lng;\r\n\r\n        if(addressMap) {\r\n            setLat(addressMap.lat);\r\n            setLng(addressMap.lng);\r\n        }\r\n\r\n        let moveOn = true; /*As giving address on map is not mandatory, user can skip it*/\r\n        if(!newLat || !newLng) {\r\n            moveOn = window.confirm('Address not selected. Do you wish to continue?');\r\n        }\r\n\r\n        if (moveOn) {\r\n\r\n       \r\n            dispatch(saveShippingAddress({\r\n                fullName, \r\n                address, \r\n                city, \r\n                postalCode, \r\n                country,\r\n                lat: newLat,\r\n                lng: newLng,\r\n            }),\r\n            );\r\n            props.history.push('/payment');\r\n        }\r\n    };\r\n\r\n    /*Defining chooseOnMap fx*/\r\n    const chooseOnMap = () => {\r\n        dispatch(saveShippingAddress({\r\n            fullName, \r\n                address, \r\n                city, \r\n                postalCode, \r\n                country,\r\n                lat,\r\n                lng,\r\n        })\r\n        );\r\n        props.history.push('/map');\r\n    };\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2></CheckoutSteps>\r\n            <form className=\"form\" onSubmit={submitHandler}>\r\n                <div>\r\n                    <h2>Shipping Address</h2>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"fullName\">Full Name</label>\r\n                    <input type=\"text\" \r\n                    id=\"fullName\" \r\n                    placeholder=\"Enter your full name\" \r\n                    value={fullName} \r\n                    onChange={(e) => setFullName(e.target.value)} \r\n                    required>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"address\">Address </label>\r\n                    <input type=\"text\" \r\n                    id=\"address\" \r\n                    placeholder=\"Enter your full address\" \r\n                    value={address} \r\n                    onChange={(e) => setAddress(e.target.value)} \r\n                    required>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"city\">City</label>\r\n                    <input type=\"text\" \r\n                    id=\"city\" \r\n                    placeholder=\"Enter your city\" \r\n                    value={city} \r\n                    onChange={(e) => setCity(e.target.value)} \r\n                    required>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"postalCode\">Postal Code</label>\r\n                    <input type=\"text\" \r\n                    id=\"postalCode\" \r\n                    placeholder=\"Enter your full name\" \r\n                    value={postalCode} \r\n                    onChange={(e) => setPostalCode(e.target.value)} \r\n                    required>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"country\">Country</label>\r\n                    <input type=\"text\" \r\n                    id=\"country\" \r\n                    placeholder=\"Your address\" \r\n                    value={country} \r\n                    onChange={(e) => setCountry(e.target.value)} \r\n                    required>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"chooseOnMap\">Location</label>\r\n                    <button type='button' onClick={chooseOnMap}\r\n                    >Select Address on Map</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <label/>\r\n                    <button className=\"primary\" type=\"submit\">Continue</button>\r\n                </div>\r\n                \r\n        </form>\r\n                \r\n        </div>\r\n        \r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}