{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { detailsUser, updateUser } from \"../actions/userActions\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { USER_UPDATE_RESET } from \"../constants/userConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserEditScreen(props) {\n  _s();\n\n  /*We need specific Id for editing data*/\n  const userId = props.match.params.id;\n  /*Now we need to define useEffect()*/\n\n  const [name, setName] = useState(' ');\n  const [email, setEmail] = useState(' ');\n  const [isSeller, setIsSeller] = useState(false);\n  /*By default it is false*/\n\n  const [isAdmin, setIsAdmin] = useState(false);\n  /*For getting users in details from redux store, i.e. from store.js*/\n\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  /*For getting users in details from redux store, i.e. from store.js*/\n\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    /*Need to check user*/\n    if (!user || user._id !== userId || successUpdate) {\n      /*If not exists, bring it*/\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      dispatch(detailsUser(userId));\n    } else {\n      /*Showing the clicked user data*/\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n      setIsSeller(user.isSeller);\n    }\n  }, [dispatch, successUpdate, user, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    /*Preventing page refresh when user clicks on the edit button*/\n\n    dispatch(updateUser({\n      _id: userId,\n      name,\n      email,\n      isSeller,\n      isAdmin\n    }));\n    /* updateUser() is defined in action.js*/\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Editing \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), successUpdate && props.history.push('/userlist'), loadingUpdate && /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 39\n        }, this), errorUpdate && /*#__PURE__*/_jsxDEV(MessageBox, {\n          variant: \"danger\",\n          children: errorUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            placeholder: \"Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"E-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"text\",\n            placeholder: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isSeller\",\n            children: \"Whether Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isSeller\",\n            type: \"checkbox\",\n            checked: isSeller,\n            onChange: e => setIsSeller(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isAdmin\",\n            children: \"Whether Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isAdmin\",\n            type: \"checkbox\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary\",\n            children: \"Update \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserEditScreen, \"ySliCSNZhESeiM15NlKHfKC39cc=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","detailsUser","updateUser","LoadingBox","MessageBox","USER_UPDATE_RESET","UserEditScreen","props","userId","match","params","id","name","setName","email","setEmail","isSeller","setIsSeller","isAdmin","setIsAdmin","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","dispatch","_id","type","submitHandler","e","preventDefault","history","push","target","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,wBAAxC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC1C;AACA,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAAlC;AAAsC;;AAEtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,GAAD,CAAhC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,GAAD,CAAlC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AAAiD;;AACjD,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AAGA;;AACA,QAAMsB,WAAW,GAAGpB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM;AAACE,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBJ,WAA/B;AAEA;;AACA,QAAMK,UAAU,GAAGzB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACI,UAAlB,CAA9B;AACA,QAAM;AACFH,IAAAA,OAAO,EAAEI,aADP;AAEFH,IAAAA,KAAK,EAAEI,WAFL;AAGFC,IAAAA,OAAO,EAAEC;AAHP,MAGwBJ,UAH9B;AAKA,QAAMK,QAAQ,GAAG/B,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AAIR;AACJ,QAAG,CAAC2B,IAAD,IAASA,IAAI,CAACO,GAAL,KAAavB,MAAtB,IAAgCqB,aAAnC,EAAkD;AAAE;AAChDC,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE3B;AAAR,OAAD,CAAR;AACAyB,MAAAA,QAAQ,CAAC7B,WAAW,CAACO,MAAD,CAAZ,CAAR;AACH,KAHD,MAGO;AACA;AACHK,MAAAA,OAAO,CAACW,IAAI,CAACZ,IAAN,CAAP;AACAG,MAAAA,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;AACAK,MAAAA,UAAU,CAACK,IAAI,CAACN,OAAN,CAAV;AACAD,MAAAA,WAAW,CAACO,IAAI,CAACR,QAAN,CAAX;AACH;AACJ,GAfQ,EAeN,CAACc,QAAD,EAAWD,aAAX,EAA0BL,IAA1B,EAAgChB,MAAhC,CAfM,CAAT;;AAkBA,QAAMyB,aAAa,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AAAoB;;AACpBL,IAAAA,QAAQ,CAAC5B,UAAU,CAAC;AAAC6B,MAAAA,GAAG,EAAEvB,MAAN;AAAcI,MAAAA,IAAd;AAAoBE,MAAAA,KAApB;AAA2BE,MAAAA,QAA3B;AAAqCE,MAAAA;AAArC,KAAD,CAAX,CAAR;AACA;AACH,GAJD;;AASA,sBACI;AAAA,2BACI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAEe,aAAjC;AAAA,8BACI;AAAA,gCACI;AAAA,iCAAarB,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKiB,aAAa,IAAKtB,KAAK,CAAC6B,OAAN,CAAcC,IAAd,CAAmB,WAAnB,CAFvB,EAGKX,aAAa,iBAAI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAHtB,EAIKC,WAAW,iBAAI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,QAApB;AAAA,oBAA8BA;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAOKL,OAAO,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAAH,GACNC,KAAK,gBAAG,QAAC,UAAD;AAAY,QAAA,OAAO,EAAG,QAAtB;AAAA,kBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAAH,gBAEP;AAAA,gCACA;AAAA,kCACI;AAAO,YAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,EAAE,EAAC,MAAV;AAAiB,YAAA,IAAI,EAAC,MAAtB;AAA6B,YAAA,WAAW,EAAC,MAAzC;AACA,YAAA,KAAK,EAAEX,IADP;AACa,YAAA,QAAQ,EAAGsB,CAAD,IAAOrB,OAAO,CAACqB,CAAC,CAACI,MAAF,CAASC,KAAV;AADrC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eASA;AAAA,kCACI;AAAO,YAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,EAAE,EAAC,OAAV;AAAkB,YAAA,IAAI,EAAC,MAAvB;AAA8B,YAAA,WAAW,EAAC,OAA1C;AACA,YAAA,KAAK,EAAEzB,KADP;AACc,YAAA,QAAQ,EAAGoB,CAAD,IAAOnB,QAAQ,CAACmB,CAAC,CAACI,MAAF,CAASC,KAAV;AADvC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATA,eAiBA;AAAA,kCACI;AAAO,YAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,EAAE,EAAC,UAAV;AAAqB,YAAA,IAAI,EAAC,UAA1B;AAAqC,YAAA,OAAO,EAAEvB,QAA9C;AACA,YAAA,QAAQ,EAAGkB,CAAD,IAAOjB,WAAW,CAACiB,CAAC,CAACI,MAAF,CAASE,OAAV;AAD5B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBA,eAyBA;AAAA,kCACI;AAAO,YAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,EAAE,EAAC,SAAV;AAAoB,YAAA,IAAI,EAAC,UAAzB;AAAoC,YAAA,OAAO,EAAEtB,OAA7C;AACA,YAAA,QAAQ,EAAGgB,CAAD,IAAOf,UAAU,CAACe,CAAC,CAACI,MAAF,CAASE,OAAV;AAD3B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBA,eAiCA;AAAA,iCACI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAjCA;AAAA,sBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsDH;;GAvGuBlC,c;UAWAN,W,EAIDA,W,EAMFD,W;;;KArBGO,c","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { detailsUser, updateUser } from \"../actions/userActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { USER_UPDATE_RESET } from \"../constants/userConstants\";\r\n\r\nexport default function UserEditScreen(props) {\r\n    /*We need specific Id for editing data*/\r\n    const userId = props.match.params.id; /*Now we need to define useEffect()*/\r\n\r\n    const [name, setName] = useState(' ');\r\n    const [email, setEmail] = useState(' ');\r\n    const [isSeller, setIsSeller] = useState(false); /*By default it is false*/\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    \r\n    \r\n    /*For getting users in details from redux store, i.e. from store.js*/\r\n    const userDetails = useSelector((state) => state.userDetails);\r\n    const {loading, error, user} = userDetails;\r\n\r\n    /*For getting users in details from redux store, i.e. from store.js*/\r\n    const userUpdate = useSelector((state) => state.userUpdate);\r\n    const {\r\n        loading: loadingUpdate, \r\n        error: errorUpdate, \r\n        success: successUpdate} = userUpdate;\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        \r\n           \r\n        \r\n            /*Need to check user*/\r\n        if(!user || user._id !== userId || successUpdate) { /*If not exists, bring it*/\r\n            dispatch({ type: USER_UPDATE_RESET});\r\n            dispatch(detailsUser(userId));\r\n        } else {\r\n               /*Showing the clicked user data*/\r\n            setName(user.name);\r\n            setEmail(user.email);\r\n            setIsAdmin(user.isAdmin);\r\n            setIsSeller(user.isSeller);\r\n        }\r\n    }, [dispatch, successUpdate, user, userId]);\r\n    \r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault(); /*Preventing page refresh when user clicks on the edit button*/\r\n        dispatch(updateUser({_id: userId, name, email, isSeller, isAdmin}));\r\n        /* updateUser() is defined in action.js*/\r\n    };\r\n\r\n    \r\n\r\n\r\n    return(\r\n        <div>\r\n            <form className=\"form\" onSubmit={submitHandler}>\r\n                <div>\r\n                    <h1>Editing {name}</h1>\r\n                    {successUpdate &&  props.history.push('/userlist')}\r\n                    {loadingUpdate && <LoadingBox></LoadingBox>}\r\n                    {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>}\r\n                </div>\r\n                {loading ? <LoadingBox></LoadingBox>\r\n                : error ? <MessageBox variant = \"danger\">{error}</MessageBox>\r\n                : \r\n                <>\r\n                <div /*for name*/>\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input id=\"name\" type=\"text\" placeholder=\"Name\"\r\n                    value={name} onChange={(e) => setName(e.target.value)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*for email*/>\r\n                    <label htmlFor=\"email\">E-mail</label>\r\n                    <input id=\"email\" type=\"text\" placeholder=\"email\"\r\n                    value={email} onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*Checkbox for whether seller*/>\r\n                    <label htmlFor=\"isSeller\">Whether Seller</label>\r\n                    <input id=\"isSeller\" type=\"checkbox\" checked={isSeller}\r\n                    onChange={(e) => setIsSeller(e.target.checked)}>\r\n\r\n                    </input>\r\n                </div>\r\n\r\n                <div /*Checkbox for whether Admin*/>\r\n                    <label htmlFor=\"isAdmin\">Whether Admin</label>\r\n                    <input id=\"isAdmin\" type=\"checkbox\" checked={isAdmin}\r\n                    onChange={(e) => setIsAdmin(e.target.checked)}>\r\n                    \r\n                    </input>\r\n                </div>\r\n                \r\n                <div>\r\n                    <button type=\"submit\" className=\"primary\">Update </button>\r\n                </div>\r\n                </>\r\n                }\r\n            </form>\r\n           \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}