{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Programming\\\\Saree\\\\frontend\\\\src\\\\screens\\\\MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport { LoadingScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport Axios from \"axios\";\nimport { USER_ADDRESS_MAP_CONFIRM } from \"../constants/userConstants\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\n/*Array that only stores places*/\n\nconst defaultLocation = {\n  lat: 88.465,\n  lng: 25.154\n};\nexport default function MapScreen() {\n  _s();\n\n  /*Defining hook for setGoogleApikey*/\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  /*Other hooks*/\n\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  /*Defining 3 ref hooks*/\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  /*We need googleAPI map from server.js*/\n\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n  /*Defining onLoad method*/\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n  /*Defining onMarkerLoad method*/\n\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n  /*Defining onLoadPlaces method*/\n\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n  /*Defining onIdle method*/\n\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n\n      /*All are fx*/\n      lng: mapRef.current.center.lng()\n    });\n  };\n  /*Defining onPlacesChanged method*/\n\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    /*Now set the new location and update*/\n\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n  /*onConfirm() method*/\n\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n    /*Get current location*/\n\n    if (places && places.length === 1) {\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('Location selected successfully');\n    } else {\n      alert('Locate your address');\n    }\n  };\n  /*Getting user location by the browser*/\n\n\n  const getUserCurrentLocation = () => {\n    /*Need to call in useEffect*/\n    if (!navigator.geolocation) {\n      alert('Your browser doesnot support geo-location, use Chrome');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadingScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"sample-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"primary\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapScreen, \"FvQoWY5xbeizQachYmSbuS4Mpc8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadingBox","LoadingScript","GoogleMap","StandaloneSearchBox","Marker","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultLocation","lat","lng","MapScreen","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport { LoadingScript, GoogleMap,\r\n    StandaloneSearchBox,\r\n    Marker,\r\n} from '@react-google-maps/api';\r\nimport Axios  from \"axios\";\r\nimport { USER_ADDRESS_MAP_CONFIRM } from \"../constants/userConstants\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst libs = ['places']; /*Array that only stores places*/\r\nconst defaultLocation = { lat: 88.465, lng: 25.154};\r\n\r\nexport default function MapScreen() {\r\n    /*Defining hook for setGoogleApikey*/\r\n    const [googleApiKey, setGoogleApiKey] = useState('');\r\n\r\n    /*Other hooks*/\r\n    const [center, setCenter] = useState(defaultLocation);\r\n    const [location, setLocation] = useState(center);\r\n\r\n    /*Defining 3 ref hooks*/\r\n    const mapRef = useRef(null);\r\n    const placeRef = useRef(null);\r\n    const markerRef = useRef(null);\r\n\r\n    /*We need googleAPI map from server.js*/\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            const { data } = await Axios('/api/config/google');\r\n            setGoogleApiKey(data);\r\n            getUserCurrentLocation();\r\n        };\r\n        fetch();\r\n    }, []);\r\n\r\n    /*Defining onLoad method*/\r\n    const onLoad = (map) => {\r\n        mapRef.current = map;\r\n    };\r\n\r\n     /*Defining onMarkerLoad method*/\r\n     const onMarkerLoad = (marker) => {\r\n        markerRef.current = marker;\r\n    };\r\n\r\n     /*Defining onLoadPlaces method*/\r\n     const onLoadPlaces = (place) => {\r\n        placeRef.current = place;\r\n    };\r\n\r\n     /*Defining onIdle method*/\r\n     const onIdle = () => {\r\n        setLocation({ \r\n            lat: mapRef.current.center.lat(),  /*All are fx*/\r\n            lng: mapRef.current.center.lng(),\r\n        })\r\n    };\r\n\r\n    \r\n     /*Defining onPlacesChanged method*/\r\n     const onPlacesChanged = () => {\r\n        const place = placeRef.current.getPlaces()[0].geometry.location;\r\n        /*Now set the new location and update*/\r\n        setCenter({ lat: place.lat(), lng: place.lng()});\r\n        setLocation({ lat: place.lat(), lng: place.lng()});\r\n    };\r\n    \r\n\r\n    /*onConfirm() method*/\r\n    const dispatch = useDispatch();\r\n    const onConfirm = () => {\r\n        const places = placeRef.current.getPlaces(); /*Get current location*/\r\n        if(places && places.length === 1) {\r\n            dispatch({\r\n                type: USER_ADDRESS_MAP_CONFIRM,\r\n                payload: {\r\n                    lat: location.lat,\r\n                    lng: location.lng,\r\n                    address: places[0].formatted_address,\r\n                    name: places[0].name,\r\n                    vicinity: places[0].vicinity,\r\n                    googleAddressId: places[0].id,\r\n                },\r\n            });\r\n            alert('Location selected successfully');\r\n        } else {\r\n            alert('Locate your address');\r\n        }\r\n    };\r\n\r\n    /*Getting user location by the browser*/\r\n    const getUserCurrentLocation = () => { /*Need to call in useEffect*/\r\n        if(!navigator.geolocation) {\r\n            alert('Your browser doesnot support geo-location, use Chrome');\r\n        } else {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                setCenter({\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude,\r\n                });\r\n                setLocation({\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    return googleApiKey ? (\r\n        <div className=\"full-container\">\r\n            <LoadingScript libraries = {libs} \r\n            googleMapsApiKey = {googleApiKey}>\r\n                <GoogleMap\r\n                id = \"sample-map\"\r\n                mapContainerStyle = {{height: '100%', width: '100%'}} \r\n                center = {center}\r\n                zoom = {15}\r\n                onLoad = {onLoad}\r\n                onIdle = {onIdle}>\r\n                \r\n                    <StandaloneSearchBox\r\n                        onLoad = {onLoadPlaces}\r\n                        onPlacesChanged = {onPlacesChanged}>\r\n\r\n                            <div>\r\n                                <input type=\"text\"\r\n                                placeholder=\"Enter your address\"></input>\r\n                                <button\r\n                                type=\"button\"\r\n                                className=\"primary\"\r\n                                onClick={onConfirm}>Confirm</button>\r\n                            </div>\r\n                    </StandaloneSearchBox>\r\n\r\n                    <Marker position = {location} onLoad = {onMarkerLoad}></Marker>\r\n                </GoogleMap>\r\n            </LoadingScript>\r\n        </div>\r\n    ) : <LoadingBox></LoadingBox>\r\n}"]},"metadata":{},"sourceType":"module"}