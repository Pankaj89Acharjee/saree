{"ast":null,"code":"import Axios from 'axios';\nimport { PRODUCT_CATEGORY_LIST_FAIL, PRODUCT_CATEGORY_LIST_REQUEST, PRODUCT_CATEGORY_LIST_SUCCESS, PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS } from '../constants/productConstants';\nexport const listProducts = (_ref\n/*Default value is 0*/\n) => {\n  let {\n    seller = '',\n    name = '',\n    category = ''\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n\n    try {\n      const {\n        data\n      } = await Axios.get(`/api/products?seller=${seller}&name=${name}&category=${category}`);\n      dispatch({\n        type: PRODUCT_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_LIST_FAIL,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n/* fx defining here which is written in ProductListScreen names as\r\ncreateProduct fx*/\n\nexport const createProduct = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST\n  });\n  /*We need token for login, so userInfo is imported here and only\r\n  admins can create products, that's why checking user is compulsory*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX request*/\n    const {\n      data\n    } = await Axios.post('/api/products', {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data.product\n    });\n    /* Here in the above, payload: data.product --> data.product is\r\n    the parameter used in the productRouter in the BACKEND => res.send({message: 'Product Created', product: createdProduct });\r\n    => in the last parameter createdProduct to the FRONTEND. \r\n    Means createdProduct = data.product*/\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\n/*For updating product, and fx defined in ProductEditScreen.js*/\n\nexport const updateProduct = product => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_UPDATE_REQUEST,\n    payload: product\n  });\n  /*GEtting token for userInfo for userSignIn*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX*/\n    const {\n      data\n    } = await Axios.put(`/api/products/${product._id}`, product, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_UPDATE_FAIL,\n      error: message\n    });\n  }\n};\n/*Fx for deleting products from the fx deleteProduct in the ProductListScreen*/\n\nexport const deleteProduct = productId => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_DELETE_REQUEST,\n    payload: productId\n  });\n  /*We need token for authenticated request in the userSignin*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = Axios.delete(`/api/products/${productId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\n/*Defining listProductCategory from the APP.JS for category wise listing of products*/\n\nexport const listProductCategories = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_CATEGORY_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/categories`);\n    dispatch({\n      type: PRODUCT_CATEGORY_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CATEGORY_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/actions/productActions.js"],"names":["Axios","PRODUCT_CATEGORY_LIST_FAIL","PRODUCT_CATEGORY_LIST_REQUEST","PRODUCT_CATEGORY_LIST_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","listProducts","seller","name","category","dispatch","type","data","get","payload","error","message","detailsProduct","productId","response","createProduct","getState","userSignin","userInfo","post","headers","Authorization","token","product","updateProduct","put","_id","deleteProduct","delete","listProductCategories"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport {\r\n  PRODUCT_CATEGORY_LIST_FAIL,\r\n  PRODUCT_CATEGORY_LIST_REQUEST,\r\n  PRODUCT_CATEGORY_LIST_SUCCESS,\r\n  PRODUCT_CREATE_FAIL,\r\n  PRODUCT_CREATE_REQUEST,\r\n  PRODUCT_CREATE_SUCCESS,\r\n  PRODUCT_DELETE_FAIL,\r\n  PRODUCT_DELETE_REQUEST,\r\n  PRODUCT_DELETE_SUCCESS,\r\n  PRODUCT_DETAILS_FAIL,\r\n  PRODUCT_DETAILS_REQUEST,\r\n  PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_UPDATE_FAIL,\r\n  PRODUCT_UPDATE_REQUEST,\r\n  PRODUCT_UPDATE_SUCCESS,\r\n} from '../constants/productConstants';\r\n\r\nexport const listProducts = ({seller = '', name='', category= ''} /*Default value is 0*/) => async (dispatch) => {\r\n  dispatch({\r\n    type: PRODUCT_LIST_REQUEST,\r\n  });\r\n  try {\r\n    const { data } = await Axios.get(\r\n      `/api/products?seller=${seller}&name=${name}&category=${category}`);\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const detailsProduct = (productId) => async (dispatch) => {\r\n  dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n  try {\r\n    const { data } = await Axios.get(`/api/products/${productId}`);\r\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* fx defining here which is written in ProductListScreen names as\r\ncreateProduct fx*/\r\nexport const createProduct = () => async(dispatch, getState) => {\r\n  dispatch({type: PRODUCT_CREATE_REQUEST});\r\n  /*We need token for login, so userInfo is imported here and only\r\n  admins can create products, that's why checking user is compulsory*/\r\n  const {userSignin:{userInfo}} = getState();\r\n  try {\r\n    /*AJAX request*/\r\n    const { data } = await Axios.post('/api/products', {}, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}`},\r\n      }\r\n    );\r\n    dispatch({ type: PRODUCT_CREATE_SUCCESS, payload: data.product});\r\n    /* Here in the above, payload: data.product --> data.product is\r\n    the parameter used in the productRouter in the BACKEND => res.send({message: 'Product Created', product: createdProduct });\r\n    => in the last parameter createdProduct to the FRONTEND. \r\n    Means createdProduct = data.product*/\r\n  } catch (error) {\r\n    const message = error.response && error.response.data.message\r\n    ? error.response.data.message\r\n    : error.message;\r\n    dispatch({type: PRODUCT_CREATE_FAIL, payload:message});\r\n  }\r\n  \r\n};\r\n\r\n\r\n/*For updating product, and fx defined in ProductEditScreen.js*/\r\nexport const updateProduct = (product) => async(dispatch, getState) => {\r\n  dispatch({ type: PRODUCT_UPDATE_REQUEST, payload: product});\r\n  /*GEtting token for userInfo for userSignIn*/\r\n  const {userSignin:{userInfo}} = getState();\r\n  try{\r\n    /*AJAX*/\r\n    const { data } = await Axios.put(`/api/products/${product._id}`, product, \r\n    {headers: {Authorization: `Bearer ${userInfo.token}`}}\r\n    )\r\n    dispatch({type: PRODUCT_UPDATE_SUCCESS, payload: data});\r\n  }\r\n   catch (error) {\r\n    const message = error.response && error.response.data.message\r\n    ? error.response.data.message\r\n    : error.message;\r\n    dispatch({type: PRODUCT_UPDATE_FAIL, error:message});\r\n  }\r\n\r\n  \r\n};\r\n\r\n/*Fx for deleting products from the fx deleteProduct in the ProductListScreen*/\r\nexport const deleteProduct = (productId) => async(dispatch, getState) => {\r\n  dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId});\r\n  /*We need token for authenticated request in the userSignin*/\r\n  const {userSignin: {userInfo}} = getState();\r\n  try{\r\n    const { data } =  Axios.delete(`/api/products/${productId}`, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}`}\r\n    })\r\n    dispatch({type: PRODUCT_DELETE_SUCCESS, payload: data});\r\n  } catch (error) {\r\n    const message = error.response && error.response.data.message\r\n    ? error.response.data.message\r\n    : error.message;\r\n    dispatch({type: PRODUCT_DELETE_FAIL, payload: message});\r\n  }\r\n};\r\n\r\n/*Defining listProductCategory from the APP.JS for category wise listing of products*/\r\nexport const listProductCategories = () => async (dispatch) => {\r\n  dispatch({\r\n    type: PRODUCT_CATEGORY_LIST_REQUEST,\r\n  });\r\n  try {\r\n    const { data } = await Axios.get(`/api/products/categories`);\r\n    dispatch({ type: PRODUCT_CATEGORY_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_CATEGORY_LIST_FAIL, payload: error.message });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}