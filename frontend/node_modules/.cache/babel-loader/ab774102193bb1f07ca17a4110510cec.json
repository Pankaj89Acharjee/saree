{"ast":null,"code":"import Axios from 'axios';\nimport { PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_REQUEST } from '../constants/productConstants';\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n/* fx defining here which is written in ProductListScreen names as\r\ncreateProduct fx*/\n\nexport const createProduct = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST\n  });\n  /*We need token for login, so userInfo is imported here and only\r\n  admins can create products, that's why checking user is compulsory*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX request*/\n    const {\n      data\n    } = await Axios.post('/api/products', {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data.product\n    });\n    /* Here in the above, payload: data.product --> data.product is\r\n    the parameter used in the productRouter in the BACKEND => res.send({message: 'Product Created', product: createdProduct });\r\n    => in the last parameter createdProduct to the FRONTEND. \r\n    Means createdProduct = data.product*/\n  } catch (error) {\n    const message = error.message && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\n/*For updating product, and fx defined in ProductEditScreen.js*/\n\nexport const updateProduct = product => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_UPDATE_REQUEST,\n    payload: product\n  });\n  /*GEtting token for userInfo for userSignIn*/\n\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    /*AJAX*/\n    const {\n      data\n    } = await Axios.put(`/api/products/${product._id}`, product, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n  } catch (error) {\n    const message = error.message && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_UPDATE_FAIL,\n      error: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/actions/productActions.js"],"names":["Axios","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_REQUEST","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","response","createProduct","getState","userSignin","userInfo","post","headers","Authorization","token","product","updateProduct","put","_id"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport {\r\n  PRODUCT_CREATE_FAIL,\r\n  PRODUCT_CREATE_REQUEST,\r\n  PRODUCT_CREATE_SUCCESS,\r\n  PRODUCT_DETAILS_FAIL,\r\n  PRODUCT_DETAILS_REQUEST,\r\n  PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_UPDATE_FAIL,\r\n  PRODUCT_UPDATE_REQUEST,\r\n} from '../constants/productConstants';\r\n\r\nexport const listProducts = () => async (dispatch) => {\r\n  dispatch({\r\n    type: PRODUCT_LIST_REQUEST,\r\n  });\r\n  try {\r\n    const { data } = await Axios.get('/api/products');\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const detailsProduct = (productId) => async (dispatch) => {\r\n  dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n  try {\r\n    const { data } = await Axios.get(`/api/products/${productId}`);\r\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* fx defining here which is written in ProductListScreen names as\r\ncreateProduct fx*/\r\nexport const createProduct = () => async(dispatch, getState) => {\r\n  dispatch({type: PRODUCT_CREATE_REQUEST});\r\n  /*We need token for login, so userInfo is imported here and only\r\n  admins can create products, that's why checking user is compulsory*/\r\n  const {userSignin:{userInfo}} = getState();\r\n  try {\r\n    /*AJAX request*/\r\n    const { data } = await Axios.post('/api/products', {}, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}`},\r\n      }\r\n    );\r\n    dispatch({ type: PRODUCT_CREATE_SUCCESS, payload: data.product});\r\n    /* Here in the above, payload: data.product --> data.product is\r\n    the parameter used in the productRouter in the BACKEND => res.send({message: 'Product Created', product: createdProduct });\r\n    => in the last parameter createdProduct to the FRONTEND. \r\n    Means createdProduct = data.product*/\r\n  } catch (error) {\r\n    const message = error.message && error.response.data.message\r\n    ? error.response.data.message\r\n    : error.message;\r\n    dispatch({type: PRODUCT_CREATE_FAIL, payload:message});\r\n  }\r\n  \r\n};\r\n\r\n\r\n/*For updating product, and fx defined in ProductEditScreen.js*/\r\nexport const updateProduct = (product) => async(dispatch, getState) => {\r\n  dispatch({ type: PRODUCT_UPDATE_REQUEST, payload: product});\r\n  /*GEtting token for userInfo for userSignIn*/\r\n  const {userSignin:{userInfo}} = getState();\r\n  try{\r\n    /*AJAX*/\r\n    const { data } = await Axios.put(`/api/products/${product._id}`, product, \r\n    {headers: {Authorization: `Bearer ${userInfo.token}`}}\r\n    )\r\n  }\r\n   catch (error) {\r\n    const message = error.message && error.response.data.message\r\n    ? error.response.data.message\r\n    : error.message;\r\n    dispatch({type: PRODUCT_UPDATE_FAIL, error:message});\r\n  }\r\n\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}