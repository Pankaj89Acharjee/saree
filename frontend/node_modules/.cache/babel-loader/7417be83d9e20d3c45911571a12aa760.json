{"ast":null,"code":"import _slicedToArray from\"C:/Users/USER/Desktop/Programming/Saree/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{detailsUser,updateUserProfile}from'../actions/userActions';import LoadingBox from'../components/LoadingBox';import MessageBox from'../components/MessageBox';import{USER_UPDATE_PROFILE_RESET}from'../constants/userConstants';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function ProfileScreen(props){/*For Updating the fields*/var _useState=useState(' '),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(' '),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(' '),_useState6=_slicedToArray(_useState5,2),password=_useState6[0],setPassword=_useState6[1];var _useState7=useState(' '),_useState8=_slicedToArray(_useState7,2),confirmPassword=_useState8[0],setConfirmPassword=_useState8[1];/*Hooks For Entering Seller data*/var _useState9=useState(' '),_useState10=_slicedToArray(_useState9,2),sellerName=_useState10[0],setSellerName=_useState10[1];var _useState11=useState(' '),_useState12=_slicedToArray(_useState11,2),sellerLogo=_useState12[0],setSellerLogo=_useState12[1];var _useState13=useState(' '),_useState14=_slicedToArray(_useState13,2),sellerDescription=_useState14[0],setSellerDescription=_useState14[1];/*Getting 'signin' details from Redux store for passing parameter to the detailsUser() fx\r\n    for getting details of the user*/var userSignin=useSelector(function(state){return state.userSignin;});/*From userSigin, we get userInfo*/var userInfo=userSignin.userInfo;/*Getting userDetails from redux store i.e., defined in App.js and \r\n    in App.js it redirects to Reducers*/var userDetails=useSelector(function(state){return state.userDetails;});var loading=userDetails.loading,error=userDetails.error,user=userDetails.user;/*Getting data from fx in userUpdateProfile() in App.js and the\r\n    fx is mined in the redux store i.e., in Reducers. We need to\r\n    define that fx consisting in the reducer and below is its definition*/var userUpdateProfile=useSelector(function(state){return state.userUpdateProfile;});/*From redux, lets get the following*/var successUpdate=userUpdateProfile.success,errorUpdate=userUpdateProfile.error,loadingUpdate=userUpdateProfile.loading;/*Importing dispatch from React Redux*/var dispatch=useDispatch();/*Getting user information from the redux*/useEffect(function(){if(!user){dispatch({type:USER_UPDATE_PROFILE_RESET});/*useEffect contains two parameters, first is the function that\r\n        runs and the second one is the dependency list in [].*/dispatch(detailsUser(userInfo._id));/*detailsUser is an action in userAction file*/}else{/*Filling name and email from the backend*/setName(user.name);setEmail(user.email);if(user.seller){setSellerName(user.seller.name);setSellerLogo(user.seller.logo);setSellerDescription(user.seller.description);}}},[dispatch,userInfo._id,user]);var submitHandler=function submitHandler(e){e.preventDefault();if(password!==confirmPassword){alert('Password didnot match');}else{dispatch(updateUserProfile({/*A new action created and define it in userActions file\r\n                as well as create a constant in the constants folder*/ /*The below data is passed to the database*/userId:user._id,name:name,email:email,password:password,sellerName:sellerName,sellerLogo:sellerLogo,sellerDescription:sellerDescription}));}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"form\",{className:\"form\",onSubmit:submitHandler,children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"User Profile\"})}),loading?/*#__PURE__*/_jsx(LoadingBox,{}):error?/*#__PURE__*/_jsx(MessageBox,{variant:\"danger\",children:error}):/*#__PURE__*/_jsxs(_Fragment,{children:[loadingUpdate&&/*#__PURE__*/_jsx(LoadingBox,{}),errorUpdate&&/*#__PURE__*/_jsx(MessageBox,{variant:\"danger\",children:errorUpdate}),successUpdate&&/*#__PURE__*/_jsx(MessageBox,{variant:\"success\",children:\"Data Updated Successfully\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{id:\"name\",type:\"text\",placeholder:\"Enter your name\",value:name,onChange:function onChange(e){return setName(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{id:\"email\",type:\"email\",placeholder:\"Enter your e-mail\",value:email,onChange:function onChange(e){return setEmail(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{id:\"password\",type:\"password\",placeholder:\"Enter your password\",onChange:function onChange(e){return setPassword(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"confirmPassword\",children:\"Confirm Password\"}),/*#__PURE__*/_jsx(\"input\",{id:\"confirmPassword\",type:\"password\",placeholder:\"Re-enter your password\",onChange:function onChange(e){return setConfirmPassword(e.target.value);}})]}),/*For Seller DATA input*/user.isSeller&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Seller Details\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sellerName\",children:\"Seller Name\"}),/*#__PURE__*/_jsx(\"input\",{id:\"sellerName\",type:\"text\",placeholder:\"Enter Seller Name\",value:sellerName,onChange:function onChange(e){return setSellerName(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sellerLogo\",children:\"Seller Logo\"}),/*#__PURE__*/_jsx(\"input\",{id:\"sellerLogo\",type:\"text\",placeholder:\"Put Seller Logo\",value:sellerLogo,onChange:function onChange(e){return setSellerLogo(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sellerDescription\",children:\"Seller Description\"}),/*#__PURE__*/_jsx(\"input\",{id:\"sellerDescription\",type:\"text\",placeholder:\"Enter Seller Description\",value:sellerDescription,onChange:function onChange(e){return setSellerDescription(e.target.value);}})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{}),/*#__PURE__*/_jsx(\"button\",{className:\"primary\",type:\"submit\",children:\"Update\"})]})]})]})});}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Programming/Saree/frontend/src/screens/ProfileScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","detailsUser","updateUserProfile","LoadingBox","MessageBox","USER_UPDATE_PROFILE_RESET","ProfileScreen","props","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","sellerName","setSellerName","sellerLogo","setSellerLogo","sellerDescription","setSellerDescription","userSignin","state","userInfo","userDetails","loading","error","user","userUpdateProfile","successUpdate","success","errorUpdate","loadingUpdate","dispatch","type","_id","seller","logo","description","submitHandler","e","preventDefault","alert","userId","target","value","isSeller"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { detailsUser, updateUserProfile } from '../actions/userActions';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport MessageBox from '../components/MessageBox';\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\r\n\r\nexport default function ProfileScreen(props) {\r\n    \r\n    /*For Updating the fields*/\r\n    const [name, setName] = useState(' ');\r\n    const [email, setEmail] = useState(' ');\r\n    const [password, setPassword] = useState(' ');\r\n    const [confirmPassword, setConfirmPassword] = useState(' ');\r\n\r\n    /*Hooks For Entering Seller data*/\r\n    const [sellerName, setSellerName] = useState(' ');\r\n    const [sellerLogo, setSellerLogo] = useState(' ');\r\n    const [sellerDescription, setSellerDescription] = useState(' ');\r\n\r\n\r\n\r\n\r\n     \r\n    /*Getting 'signin' details from Redux store for passing parameter to the detailsUser() fx\r\n    for getting details of the user*/\r\n    const userSignin = useSelector((state) => state.userSignin);\r\n    /*From userSigin, we get userInfo*/\r\n    const {userInfo} = userSignin;\r\n   \r\n\r\n    /*Getting userDetails from redux store i.e., defined in App.js and \r\n    in App.js it redirects to Reducers*/\r\n    const userDetails = useSelector((state) => state.userDetails);\r\n    const { loading, error, user } = userDetails;\r\n\r\n    /*Getting data from fx in userUpdateProfile() in App.js and the\r\n    fx is mined in the redux store i.e., in Reducers. We need to\r\n    define that fx consisting in the reducer and below is its definition*/\r\n    const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n    /*From redux, lets get the following*/\r\n    const { success: successUpdate, error: errorUpdate, loading: loadingUpdate } = userUpdateProfile;\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    /*Importing dispatch from React Redux*/\r\n    const dispatch = useDispatch();\r\n\r\n    /*Getting user information from the redux*/\r\n    useEffect(() => {\r\n        if(!user) {\r\n            dispatch({ type: USER_UPDATE_PROFILE_RESET});\r\n             /*useEffect contains two parameters, first is the function that\r\n        runs and the second one is the dependency list in [].*/\r\n\r\n            dispatch(detailsUser(userInfo._id)); /*detailsUser is an action in userAction file*/\r\n        } else {\r\n            /*Filling name and email from the backend*/\r\n            setName(user.name);\r\n            setEmail(user.email);\r\n            if(user.seller) {\r\n                setSellerName(user.seller.name);\r\n                setSellerLogo(user.seller.logo);\r\n                setSellerDescription(user.seller.description);\r\n            }\r\n        }\r\n    }, [dispatch, userInfo._id, user]);\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (password !== confirmPassword)\r\n        {\r\n            alert('Password didnot match');\r\n        } else {\r\n            dispatch(updateUserProfile({ /*A new action created and define it in userActions file\r\n                as well as create a constant in the constants folder*/\r\n                /*The below data is passed to the database*/\r\n                userId: user._id, \r\n                name, \r\n                email, \r\n                password,\r\n                sellerName,\r\n                sellerLogo,\r\n                sellerDescription,\r\n\r\n\r\n            \r\n            })\r\n         );\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <form className=\"form\" onSubmit = {submitHandler}>\r\n                <div>\r\n                    <h1>User Profile</h1>\r\n                </div>\r\n                { loading ? (<LoadingBox></LoadingBox>\r\n                ) : error ? (<MessageBox variant = \"danger\">{error}</MessageBox>\r\n                ) : (\r\n\r\n         \r\n                <>\r\n\r\n                { loadingUpdate && <LoadingBox></LoadingBox>}\r\n                {errorUpdate && (<MessageBox variant = \"danger\">{errorUpdate}</MessageBox>\r\n                )}\r\n                {successUpdate && <MessageBox variant = \"success\">Data Updated Successfully</MessageBox>}\r\n                    <div>\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <input id = \"name\"\r\n                               type = \"text\"\r\n                               placeholder = \"Enter your name\"\r\n                               value={name}\r\n                               onChange = {(e) => setName(e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input id = \"email\"\r\n                               type = \"email\"\r\n                               placeholder = \"Enter your e-mail\"\r\n                               value={email}\r\n                               onChange = {(e) => setEmail(e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input id = \"password\"\r\n                               type = \"password\"\r\n                               placeholder = \"Enter your password\"\r\n                               onChange = {(e) => setPassword(e.target.value)}>\r\n                        </input>    \r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                        <input id = \"confirmPassword\"\r\n                               type = \"password\"\r\n                               placeholder = \"Re-enter your password\"\r\n                               onChange = {(e) => setConfirmPassword(e.target.value)}>\r\n                               \r\n                        </input>\r\n                    </div>   \r\n\r\n                    {\r\n                        /*For Seller DATA input*/\r\n                        user.isSeller && (\r\n                            <>\r\n                            <h2>Seller Details</h2>\r\n                            <div>\r\n                                <label htmlFor='sellerName'>Seller Name</label>\r\n                                <input id = \"sellerName\" type=\"text\" placeholder='Enter Seller Name' \r\n                                value={sellerName} onChange={(e) => setSellerName(e.target.value)}>\r\n                                </input>                          \r\n                            </div>\r\n\r\n                            <div>\r\n                                <label htmlFor='sellerLogo'>Seller Logo</label>\r\n                                <input id = \"sellerLogo\" type=\"text\" placeholder='Put Seller Logo' \r\n                                value={sellerLogo} onChange={(e) => setSellerLogo(e.target.value)}>\r\n                                </input>                          \r\n                            </div>\r\n\r\n\r\n                            <div>\r\n                                <label htmlFor='sellerDescription'>Seller Description</label>\r\n                                <input id = \"sellerDescription\" type=\"text\" placeholder='Enter Seller Description' \r\n                                value={sellerDescription} onChange={(e) => setSellerDescription(e.target.value)}>\r\n                                </input>                          \r\n                            </div>\r\n                            </>\r\n                        )\r\n                    }         \r\n\r\n                    <div>\r\n                        <label/>\r\n                        <button className=\"primary\" type=\"submit\">Update</button>\r\n                        \r\n                    </div>\r\n                </>\r\n                ) \r\n            }\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}